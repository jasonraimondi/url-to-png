import{_ as e,c as o,o as t,a2 as r}from"./chunks/framework.B5nJBhaa.js";const g=JSON.parse('{"title":"Storage Providers","description":"","frontmatter":{},"headers":[],"relativePath":"storage_providers/index.md","filePath":"storage_providers/index.md"}'),a={name:"storage_providers/index.md"},i=r('<h1 id="storage-providers" tabindex="-1">Storage Providers <a class="header-anchor" href="#storage-providers" aria-label="Permalink to &quot;Storage Providers&quot;">​</a></h1><p>The project supports multiple storage providers for caching rendered images. The storage provider can be configured using the <code>STORAGE_PROVIDER</code> environment variable. The available storage providers are:</p><h2 id="stub-storage-provider-default" tabindex="-1">Stub Storage Provider (default) <a class="header-anchor" href="#stub-storage-provider-default" aria-label="Permalink to &quot;Stub Storage Provider (default)&quot;">​</a></h2><p>The stub storage provider is a placeholder storage provider that doesn&#39;t actually store or retrieve images, it simply logs debug messages. It can be used for testing or when storage functionality is not required.</p><h2 id="filesystem" tabindex="-1">Filesystem <a class="header-anchor" href="#filesystem" aria-label="Permalink to &quot;Filesystem&quot;">​</a></h2><p>The filesystem storage provider allows storing and retrieving rendered images on the local filesystem.</p><ul><li><code>STORAGE_PROVIDER</code>: <code>&quot;filesystem&quot;</code></li><li><code>IMAGE_STORAGE_PATH</code>: The directory path where images will be stored</li></ul><h2 id="s3" tabindex="-1">S3 <a class="header-anchor" href="#s3" aria-label="Permalink to &quot;S3&quot;">​</a></h2><p>The S3 compatible storage provider allows storing and retrieving rendered images using Amazon S3.</p><ul><li><code>STORAGE_PROVIDER</code>: <code>&quot;s3&quot;</code></li><li><code>AWS_BUCKET</code>: The name of the S3 bucket to store images</li><li><code>AWS_ACCESS_KEY_ID</code>: The AWS access key ID</li><li><code>AWS_SECRET_ACCESS_KEY</code>: The AWS secret access key</li><li><code>AWS_DEFAULT_REGION</code>: The AWS region for S3 (default: &quot;us-east-1&quot;)</li><li><code>AWS_FORCE_PATH_STYLE</code>: Set to <code>true</code> to use path-style URLs for S3 (default: <code>false</code>)</li><li><code>AWS_ENDPOINT_URL_S3</code>: The endpoint URL for S3 (optional)</li></ul><h2 id="couchdb" tabindex="-1">CouchDB <a class="header-anchor" href="#couchdb" aria-label="Permalink to &quot;CouchDB&quot;">​</a></h2><p>The CouchDB storage provider allows storing and retrieving rendered images using CouchDB.</p><ul><li><code>STORAGE_PROVIDER</code>: <code>&quot;couchdb&quot;</code></li><li><code>COUCH_DB_PROTOCOL</code>: The protocol for connecting to CouchDB (e.g., &quot;http&quot; or &quot;https&quot;)</li><li><code>COUCH_DB_USER</code>: The CouchDB username</li><li><code>COUCH_DB_PASS</code>: The CouchDB password</li><li><code>COUCH_DB_HOST</code>: The CouchDB host</li><li><code>COUCH_DB_PORT</code>: The CouchDB port</li><li><code>COUCHDB_DATABASE</code>: The name of the CouchDB database to store images (default: &quot;images&quot;)</li></ul>',13),d=[i];function s(c,l,n,h,u,_){return t(),o("div",null,d)}const S=e(a,[["render",s]]);export{g as __pageData,S as default};
